#!/bin/bash

#####################################
#Author: Leon Lee                   #
#email: lendylongli@gmail.com       #
#QQ: 730395591                      #
#Version: 1.0                       #
#Note: If you have some GOOD ideas  #
#	     or advice, please mail me^^  #
#Modified: flytreeleft @ 2012-09-27 #
#          (flytreeleft@126.com)    #
#####################################

#####################################
ShareNet=eth0
Wmode=ad-hoc
Wchannel=auto
Wessid=WiFi-Network
WInterface=$1
# only the word which has 13 characters is a valid password
WPasskey=
Wkey=off
Igateway=192.168.2.254
Inetmask=255.255.255.0
Inetwork=192.168.2.0
DhcpRangeMin=192.168.2.10
DhcpRangeMax=192.168.2.105
#####################################

adhocFolder=/etc/adhoc
dnsmasqFile=$adhocFolder/dnsmasq.conf
resolvFile=/etc/resolv.conf
dnsmasqPid=/var/run/dnsmasq.pid
dnsmasqLeases=/var/run/dnsmasq.leases

function sleep_and_print
{
  sleep 1
  if [ $1 -ne 0 ]; then
    echo -e "    [ \033[31mFAILED\033[0m ]"
  else
    echo "    [ GOOD ]"
  fi
}

# start Ad-hoc
function adhoc_start
{
	echo "Starting Ad-hoc..."
	check_dnsmasq
	sleep 1

	echo -n "Setting $WInterface gateway[$Igateway] and netmask[$Inetmask]..."
	ifconfig $WInterface $Igateway netmask $Inetmask 2> /dev/null
  sleep_and_print $?

	echo -n "Setting down $WInterface..."
	ifconfig $WInterface down 2> /dev/null
  sleep_and_print $?
	# only is wlan0 shut down, you can set mode
	echo -n "Setting $WInterface mode[$Wmode]..."
	iwconfig $WInterface mode $Wmode 2> /dev/null
  sleep_and_print $?
	
	echo -n "Setting $WInterface essid[$Wessid]..."
	iwconfig $WInterface essid $Wessid 2> /dev/null
  sleep_and_print $?
	
	echo -n "Setting $WInterface cannel[$Wchannel]..."
	iwconfig $WInterface channel $Wchannel 2> /dev/null
  sleep_and_print $?
	
  if [ -n "$WPasskey" ]; then
    Wkey=restricted
    echo -n "Setting $WInterface password[$WPasskey]..."
    iwconfig $WInterface key s:$WPasskey 2> /dev/null
    sleep_and_print $?
  else
    Wkey=off
  fi
	
  echo -n "Setting $WInterface key type[$Wkey]..."
  iwconfig $WInterface key $Wkey 2> /dev/null
  sleep 1
  if [ "$Wkey" = "off" ]; then
    echo "    [ WARNING, non-encrypted network ]"
  else
    echo "    [ GOOD ]"
  fi
	
	echo -n "Setting up $WInterface..."
	ifconfig $WInterface up 2> /dev/null
  sleep_and_print $?

	echo -n "Setting iptable..."
	#remove the old rules
	iptables -N wireless-adhoc
  iptables -F wireless-adhoc
  iptables -t nat -F PREROUTING
  iptables -t nat -F POSTROUTING
  iptables -t nat -F
	#bring up the NAT rules
	iptables -A wireless-adhoc -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A wireless-adhoc -s $Inetwork/24 -j ACCEPT
	iptables -A wireless-adhoc -p 47 -j ACCEPT
	iptables -A wireless-adhoc -j DROP
	iptables -A FORWARD -m state --state INVALID -j DROP
	iptables -A FORWARD -j wireless-adhoc
	iptables -t nat -I POSTROUTING -s $Inetwork/24 -j MASQUERADE
  sleep 1
	echo "    [ GOOD ]"

	sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

	dnsmasq -i $WInterface --resolv-file=$resolvFile --conf-file=$dnsmasqFile
	echo "Completed!^^"
}

# stop Ad-hoc
function adhoc_stop
{
	echo "Stopping adhoc ..."
	sh -c "echo 0 > /proc/sys/net/ipv4/ip_forward"
	echo -n "."
  # only is wlan0 shut down, you can set mode
	ifconfig $WInterface down
	sleep 1
	echo -n "."

	# stop adhoc mode
	iwconfig $WInterface mode managed
	sleep 1
	echo -n "."

	iwconfig $WInterface key off
	sleep 1
	echo -n "."

	iwconfig $WInterface essid any
	sleep 1
	echo -n "."

	# remove iptabled rules
	iptables -D FORWARD -j wireless-adhoc
	iptables -D FORWARD -m state --state INVALID -j DROP
	iptables -F wireless-adhoc
	iptables -X wireless-adhoc
	iptables -t nat -F PREROUTING
	iptables -t nat -F POSTROUTING
	iptables -t nat -F
	sleep 1
	echo -n "."

	if [ -f $dnsmasqPid ]; then
		dnsmasqID=`cat $dnsmasqPid`
		kill $dnsmasqID
	fi
	if [ -f $dnsmasqLeases ]; then 
		rm $dnsmasqLeases
	fi
	echo -e "\nWifi ad-hoc now stopped"
}

function adhoc_restart
{
	echo "Now, resart ad-hoc ..."
	adhoc_stop
	sleep 2
	adhoc_start
}
# check dnsmasq.conf
function check_dnsmasq
{

	if [ -f $dnsmasqPid ]; then
		echo "Dhcp is running!"
		echo "Now, restart Ad-hoc"
		adhoc_stop
	fi
	if [ ! -d $adhocFolder ]; then
    mkdir $adhocFolder
	fi

	if [ ! -f $dnsmasqFile ]; then
    echo "$dnsmasqFile is not exist, now building."

    echo "dhcp-authoritative" > $dnsmasqFile
    echo "dhcp-range=$DhcpRangeMin,$DhcpRangeMax,12h" >> $dnsmasqFile
    echo "dhcp-leasefile=$dnsmasqLeases" >> $dnsmasqFile
    echo "pid-file=$dnsmasqPid" >> $dnsmasqFile
    echo "user=root" >> $dnsmasqFile
    echo "no-negcache" >> $dnsmasqFile
	fi
}

# is super user?
function super_user
{
	if [ "$UID" = "0" ]; then
    return 0
	else
    return 1
	fi
}

function usage
{
	echo "             Wifi Ad-hoc Control"
  echo
  echo "Usage:"
  echo "    $0 interface [essid X] [key K] [start|stop|restart]"
  echo
  echo "Description:"
  echo "    essid    The name of your network, default \"$Wessid\"."
  echo "    key      The encryption key of your network,"
  echo "             you can use any ASCII string(only 13 characters),"
  echo "             if not set, your network will be non-encrypted."
  echo "    start    Start creating Wifi Ad-hoc Network."
  echo "    stop     Stop Wifi Ad-hoc Network."
  echo "    restart  Restart creating Wifi Ad-hoc Network."
}

if [ $# -lt 1 ]; then
  usage
  exit 1
fi
if ! super_user ; then
  echo "Need super user permission!"
  exit 1
fi

Action=start
shift
while [[ -n $1 ]]; do
  case $1 in
    essid)  shift
            Wessid=$1
            ;;
    key)    shift
            WPasskey=$1
            if [[ -n $WPasskey && ${#WPasskey} -ne 13 ]]; then
              echo "Encrypted key must has 13 characters."
              exit 1
            fi
            ;;
    stop)   Action=stop
            ;;
    restart) Action=restart
            ;;
    *)      usage
            exit 1
            ;;
  esac
  shift
done
case $Action in
  start)    adhoc_start
            ;;
  stop)     adhoc_stop
            ;;
  restart)  adhoc_restart
            ;;
esac
